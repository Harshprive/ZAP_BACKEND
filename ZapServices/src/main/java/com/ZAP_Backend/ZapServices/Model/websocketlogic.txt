//     ----------> send to Provider App
public ServiceResponse serviceResponse(Long userId, Long serviceId, Long categoryId, Long providerId) {
        // 1. Prepare Future
        CompletableFuture<String> future = new CompletableFuture<>();
        responseFutures.put(providerId, future);

        // 2. Build and send the request
        ProviderRequest req = new ProviderRequest(userId, serviceId, categoryId, providerId);

        ServiceProvider providerData=providerRepository.findById(providerId).orElseThrow();
        Servicee serviceData=serviceRepository.findById(serviceId).orElseThrow();
        Category categoryData=categoryRepository.findById(categoryId).orElseThrow();

        // Send the request to the specific provider via WebSocket (to their topic)
        messagingTemplate.convertAndSend("/topic/service/request/" + providerId, req);


        // 3. Wait for provider response (timeout 10 sec)
        String status;
        try {
            status = future.get(60, TimeUnit.SECONDS);
            System.out.println("✅ Provider responded with status: " + status);
//            BOOKING

        } catch (TimeoutException e) {
            status = "TIMEOUT";
            System.out.println("⏰ Provider did not respond in time.");
//             NEXT
        } catch (Exception e) {
            status = "ERROR";
            System.out.println("❌ Error while waiting for provider response: " + e.getMessage());
        } finally {
            responseFutures.remove(providerId);
        }


        // 4. Build ServiceResponse
        ServiceResponse res = new ServiceResponse();
        res.setService_name(serviceData.getService_name());  // Retrieve from DB based on IDs
        res.setService_category(categoryData.getCategory_name());
        res.setProvide_name(providerData.getProvider_name());
        res.setStatus(status);       // "ACCEPTED" or "REJECTED" or "TIMEOUT"
        res.setDate_coming(status.equals("ACCEPTED") ? LocalDateTime.now().toString() : null);
        return res;
    }